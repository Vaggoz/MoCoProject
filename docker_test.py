# -*- coding: utf-8 -*-
"""Docker_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OY5G5OKOqkv-Z5ZvbDmXuU3KkYQtf1tI
"""

import numpy as np
import pandas as pd
import nibabel as nib
from skimage import feature
import matplotlib.pyplot as plt
from scipy import ndimage as ndi
from skimage.util import random_noise
from scipy import ndimage

import os
from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)
root_path = 'gdrive/My Drive/Thesis' 
os.chdir(root_path)
os.getcwd()

img=nib.load("brainmask.mgz")
img=np.asarray(img.dataobj)
img=img.astype(np.float)

def AES(img,brainmask=None,sigma=np.sqrt(2)):
#image cropping
  brain=None
  if brainmask is not None:
    brain=img*brainmask
    img=brain
  else:
    img=img
  
  o=np.array(np.where(img>0)) #array with the dimensions of nonzero intesnity voxels
  crop=img[np.amin(o[0,:],axis=0):np.amax(o[0,:]),np.amin(o[1,:],axis=0):np.amax(o[1,:],axis=0),np.amin(o[2,:],axis=0):np.amax(o[2,:],axis=0)]
  x,y,z=crop.shape
  Gx=np.array([[-1,-1,-1], [0,0,0], [1,1,1]])
  Gy=np.array([[-1,0,1], [-1,0,1], [-1,0,1]])
  aES=np.zeros(z)
  for k in range(z):
    Ix = ndimage.convolve(crop[:,:,k], Gx)                                  #Convolutions with the two kernels Gx and Gy
    Iy = ndimage.convolve(crop[:,:,k], Gy)
    CanImg = feature.canny(crop[:,:,k],sigma=sigma)                         #Application of canny edge detector
    aES[k]=np.sqrt(np.sum(CanImg*(Ix**2+Iy**2)))/np.sum(CanImg)             #Calculation of average edge strength
  aes=np.mean(aES)
  fig, (ax1,ax2,ax3,ax4)=plt.subplots(1,4, figsize=(12, 3))

  ax1.set_title('A)')
  ax1.imshow(crop[:,:,100],cmap='gray',aspect='auto')

  ax2.set_title('B)')
  ax2.imshow(ndimage.convolve(crop[:,:,100], Gx), cmap='gray',aspect='auto')

  ax3.set_title('C)')
  ax3.imshow(ndimage.convolve(crop[:,:,100], Gy),cmap='gray',aspect='auto')

  ax4.set_title('D)')
  ax4.imshow(feature.canny(crop[:,:,100],sigma=sigma),cmap='gray',aspect='auto')

  ax2.axis('off')
  ax1.axis('off')
  ax3.axis('off')
  ax4.axis('off')

  fig.tight_layout()
  plt.show()
  return aes

a=AES(img)
print(a)